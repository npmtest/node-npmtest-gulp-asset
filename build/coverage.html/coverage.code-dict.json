{"/home/travis/build/npmtest/node-npmtest-gulp-asset/test.js":"/* istanbul instrument in package npmtest_gulp_asset */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-asset/lib.npmtest_gulp_asset.js":"/* istanbul instrument in package npmtest_gulp_asset */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_asset = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_asset = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-asset/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-asset && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_asset */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_asset\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_asset.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_asset.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_asset.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_asset.__dirname + '/lib.npmtest_gulp_asset.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-asset/node_modules/gulp-asset/index.js":"/**\n * gulp-asset\n *\n * Inspired by \"gulp-rev\" and \"gulp-replace\" modules, some of their code is used in this module.\n * This module was created as an adaptation to both create md5 revision files and replace\n * all \"asset://\" urls within the contents of the files with the new revision filenames.\n *\n * You should run .rev() on all tasks where you want a new filename to be created based on md5 hash of contents (ie, img, css, fonts, etc)\n * You should run .replace() on all tasks where you want them scanned for asset:// urls (ie, css, html, etc)\n */\n\nvar crypto = require('crypto');\nvar path = require('path');\nvar gutil = require('gulp-util');\nvar through = require('through2');\nvar fs = require('fs');\nvar _ = require('underscore');\nvar pkg = require('./package.json');\nvar version = pkg.version;\n\n// Use .config({}) command to modify these defaults\nvar defaults = {\n\tprefix: '', // can be string or array of different prefixes.\n\tsrc: 'src', // specify where your src code is located\n\tdest: 'dist', // specify where your src code is located\n\tassetPath: '/assets/', // specify where you\n\tmanifest: 'manifest.js', // filename format for saving the manifest file (a revision number will be put on it)\n\tglobalVar: '__assets', // the global var to assign manifest to. It will attach it to the 'window' (ie, window.__assets).\n\t// @TODO: In future these values could be determined from the size of the project directory\n\tinterval: 100, // change the interval or repeat value for projects that are larger and take more time for all assets to complete\n\trepeat: 10,\n\tcleanup: true, // true means it will clean old files when they are regenerated by new commands (helpful with 'watch' plugin)\n\thash: true // enable/disable revision hashing. can be helpful during development if you don't want hashes in filenames\n};\n\n// Create empty manifest to keep track of files being processed and their rev filename\nvar manifest = {};\n\n// We define an index for use in giving manifest unique number that can\n// then be modulus switched on if there are multiple prefix passed in\n// This way the assets will always go to the same prefix url\nvar index = 0;\n\n// Method to apply new configuration over the default.\nvar config = function(opts) {\n\tdefaults = _.defaults(opts, defaults);\n}\n\nfunction md5(opts, str) {\n\tvar shouldHash = typeof opts.hash != 'undefined' ? opts.hash : defaults.hash;\n\treturn shouldHash ? crypto.createHash('md5').update(str, 'utf8').digest('hex').slice(0, 8) : undefined;\n}\n\n// Manifest file name creation\nvar manifestRev = md5({}, ('' + +(new Date())));\nfunction manifestFileName(opts) {\n\topts = opts || {};\n\tvar ext = path.extname(defaults.manifest);\n\tvar assetPath = (opts.assetPath || defaults.assetPath);\n\tvar basePath = assetPath + path.basename(defaults.manifest).replace(ext, '');\n\tvar output = typeof manifestRev !== 'undefined' ? basePath + '-' + manifestRev + ext : basePath + ext;\n\treturn output;\n};\n\n// Setup method to write the manifest file. It uses a timeout to attempt to reduce\n// number of writes that are performed.\nvar manifestTimeout;\nfunction writeManifest() {\n\tif (manifestTimeout) {\n\t\tclearTimeout(manifestTimeout);\n\t}\n\n\tmanifestTimeout = setTimeout(function() {\n\t\tvar assets = {};\n\t\t_.keys(manifest).forEach(function(key) {\n\t\t\tassets[key] = manifest[key].dest;\n\t\t});\n\n\t\tvar filepath = path.join(defaults.dest, manifestFileName());\n\t\tfs.writeFile(filepath, ';window.' + defaults.globalVar + ' = ' + JSON.stringify(assets) + ';');\n\t}, 200);\n}\n\n// Gets md5 from file contents and writes new filename with hash included to destinations\nvar rev = function(opts) {\n\tvar opts = opts || {};\n\tvar shouldHash = typeof opts.hash != 'undefined' ? opts.hash : defaults.hash;\n\tvar prefix = _.flatten([defaults.prefix]);\n\tvar shouldPrefix = typeof opts.shouldPrefix != 'undefined' ? opts.shouldPrefix : true;\n\treturn through.obj(function(file, enc, cb) {\n\t\tvar originalPath = file.path;\n\n\t\t// Get hash of contents\n\t\tvar hash = md5(opts, file.contents.toString());\n\n\t\t// Construct new filename\n\t\tvar ext = path.extname(file.path);\n\t\tvar basePath = path.basename(file.path, ext);\n\t\tvar filename = typeof hash !== 'undefined' ? basePath + '-' + hash + ext : basePath + ext;\n\t\tfile.path = path.join(path.dirname(file.path), filename);\n\n\t\t// Add to manifest\n\t\tvar base = path.join(file.cwd, defaults.src);\n\t\tvar key = originalPath.replace(base, '');\n\n\t\t// @TODO: Instead of this it could use \"glob\" module to regex delete files\n\t\t// Check for existing value and whether cleanup is set\n\t\tvar existing = manifest[key];\n\t\tif (existing && existing.src && defaults.cleanup) {\n\t\t\t// Delete the file\n\t\t\tfs.unlink(path.join(file.cwd, defaults.dest, existing.src));\n\t\t} else if (defaults.cleanup && shouldHash) {\n\t\t\t// Check if cleanup and hash enabled then we can remove any non hashed version from dest directory\n\t\t\tvar nonHashPath = path.join(path.dirname(originalPath), basePath + ext).replace(base, '');\n\t\t\tvar absPath = path.join(file.cwd, defaults.dest, nonHashPath);\n\t\t\tfs.exists(absPath, function(exists) {\n\t\t\t\tif (!exists) return;\n\t\t\t\tfs.unlink(absPath);\n\t\t\t});\n\t\t}\n\n\t\tvar filePrefix = shouldPrefix ? prefix[index % prefix.length] : '';\n\n\t\t// Finally add new value to manifest\n\t\tvar src = file.path.replace(base, '');\n\t\tmanifest[key] = {\n\t\t\tindex: index++,\n\t\t\tsrc: src,\n\t\t\tdest: filePrefix + src\n\t\t};\n\n\t\t// Write manifest file\n\t\twriteManifest();\n\n\t\t// Return and continue\n\t\tthis.push(file);\n\t\tcb();\n\t});\n}\n\n// Scans the contents of the file and replaces all asset:// urls with the correct revision url\nvar replace = function() {\n\tvar prefix = _.flatten([defaults.prefix]);\n\tvar interval = defaults.interval;\n\tvar assetPath = defaults.assetPath;\n\n\treturn through.obj(function(file, enc, cb) {\n\t\tvar newContents = file.contents;\n\t\tvar _this = this;\n\t\tvar completed = {};\n\t\tvar repeats = 0;\n\t\t(function recurse() {\n\t\t\tvar failed = repeats >= defaults.repeat;\n\n\t\t\t// Find how many are files are still missing from the manifest,\n\t\t\t// if some are missing don't continue, bypassing the regex should hopefully be a less expensive task\n\t\t\tif (!_.isEmpty(completed)) {\n\t\t\t\tvar keys = _.keys(completed);\n\t\t\t\tvar missing = 0;\n\t\t\t\tkeys.forEach(function(key) {\n\t\t\t\t\tmissing += typeof manifest[key] == 'undefined';\n\t\t\t\t});\n\t\t\t\tif (missing > 0 && !failed) {\n\t\t\t\t\trepeats++;\n\t\t\t\t\tsetTimeout(recurse, interval);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there are none missing then scan contents\n\t\t\tnewContents = new Buffer(String(file.contents).replace(/\\b((asset:\\/\\/?)[^#!%&*$?'\"\\s()<>]*(?:\\([\\w\\d]*\\)|([\\.\\w*]|\\/)))/ig, function(match) {\n\t\t\t\t// Replace placeholder with correct base\n\t\t\t\tvar filepath = match.replace('asset://', assetPath);\n\n\t\t\t\t// Handle matches where it is just the base protocol to replace\n\t\t\t\t// Useful for your javascript expressions wher url is constructed using expression\n\t\t\t\tif (match == 'asset://') {\n\t\t\t\t\treturn filepath;\n\t\t\t\t}\n\n\t\t\t\t// If manifest then return special manifest path\n\t\t\t\tif (filepath == path.join(assetPath, defaults.manifest)) {\n\t\t\t\t\treturn prefix[0] + manifestFileName(opts);\n\t\t\t\t}\n\n\t\t\t\tcompleted[filepath] = false;\n\n\t\t\t\t// Check if file already in manifest, if it is, use it\n\t\t\t\tvar found = manifest[filepath];\n\n\t\t\t\t// Else wait for it\n\t\t\t\tif (!found) {\n\t\t\t\t\t// @TODO: We could insert a 404 url in here if \"failed\" is true, probs not needed though\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t\t// Get output filename and index for use in switching between prefixes\n\t\t\t\tvar output = found.dest;\n\t\t\t\tcompleted[filepath] = true;\n\t\t\t\treturn output;\n\t\t\t}));\n\n\t\t\t// If all matches have been completely replaced, finish, else recurse\n\t\t\tif (_.indexOf(_.values(completed), false) == -1 || failed) {\n\t\t\t\tif (failed) {\n\t\t\t\t\tvar errored = _.compact(_.map(completed, function(val, key) { return !val ? gutil.colors.red(key): undefined }));\n\t\t\t\t\tvar fileName = path.join(file.path.replace(file.cwd, '').replace(defaults.src, defaults.dest));\n\t\t\t\t\tvar message = gutil.colors.yellow(fileName) + ': Stalled or unable to process asset url: ' + errored.join(', ') + '. This can occur if the file doesn\\'t exist or is very large and takes time to process. You can updated the \"interval\" option or the \"repeats\".';\n\t\t\t\t\t_this.emit('error', new gutil.PluginError('gulp-asset', message));\n\t\t\t\t}\n\t\t\t\tfile.contents = newContents;\n\t\t\t\t_this.push(file);\n\t\t\t\tcb();\n\t\t\t} else {\n\t\t\t\trepeats++;\n\t\t\t\tsetTimeout(recurse, interval);\n\t\t\t}\n\t\t})();\n\t});\n}\n\nmodule.exports = {\n\tversion: version,\n\tconfig: config,\n\trev: rev,\n\treplace: replace\n};"}